<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom"><id>https://github.com/aqvq/aqvq</id><title>RSS feed of aqvq's aqvq</title><updated>2024-11-28T12:03:17.054112+00:00</updated><link href="https://github.com/aqvq/aqvq"/><link href="https://raw.githubusercontent.com/aqvq/aqvq/main/feed.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><entry><id>https://github.com/aqvq/aqvq/issues/2</id><title>Obsidian使用总结</title><updated>2024-11-28T12:03:17.494522+00:00</updated><content type="html"><![CDATA[<h2>基本使用</h2>
<blockquote>
<p>CSDN、知乎、B站都有很多系统的教程，这里简单列举一些资源</p>
</blockquote>
<p><a href="https://www.bilibili.com/video/BV1i3411k7TQ/?spm_id_from=333.337.search-card.all.click">Johnny学的公开课 第一集 将近3小时的Obsidian小白入门课，都是基础知识，学会了就能上手OB，一个社区插件都没讲_哔哩哔哩_bilibili</a></p>
<p><a href="https://publish.obsidian.md/chinesehelp">Obsidian中文教程 - Obsidian Publish</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/409095645">一个大学生与Obsidian。【玩转Obsidian的保姆级教程】 - 知乎 (zhihu.com)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/398625612">Obsidian知识体系搭建：小白入门篇 - 知乎 (zhihu.com)</a></p>
<p>Obsidian最突出的功能是双链和白板，最基本的功能是使用Markdown记录笔记，最大的优势是可定制性高、可扩展性强。另外，Obsidian的文件管理也做得不错。以此为基础Obsidian还衍生出了其他很多功能……</p>
<p>抓住了每个软件的优点，加以充分利用，才是使用工具最佳方式，而不是让自己的需求去适配软件，刻意追求<code>All in One</code>是不理智的。</p>
<h2>插件使用</h2>
<blockquote>
<p>[!注意]
下载插件的过程可能需要魔法上网，在其他正常使用软件的时候并不需要</p>
</blockquote>
<p>打开插件 -&gt; 第三方插件 -&gt; 插件市场就可以下载插件了。在下载插件之前，注意先把安全模式关闭。</p>
<p>目前我主要使用以下插件：</p>
<h4>Advanced Tables</h4>
<p>增强了Markdown表格的编辑体验，经常用Markdown写表格的必装</p>
<h4>Annotator</h4>
<p>PDF批注软件，可能会破坏原Markdown语法。</p>
<p>关于PDF批注笔记的解决方案/工作流有很多，这里不展开说。列举些我知道的：</p>
<p><a href="https://www.bilibili.com/video/BV1R44y137ci/?vd_source=653c32e1b9068b6dc916bedc5c6c2c7d">香，Zotero和Obsidian双向联动实时更新方法，利用bibnotes和zotero-obsidian-citations实现_哔哩哔哩_bilibili</a></p>
<p><a href="https://www.bilibili.com/read/cv19990701?spm_id_from=333.999.0.0">BookNote v0.3.2 更新 - 哔哩哔哩 (bilibili.com)</a></p>
<h4>Dataview</h4>
<p>通过SQL语法对文章数据进行筛选展示，功能强大，用好了可以很方便地整理展示数据</p>
<h4>Obsidian Git</h4>
<p>Git同步插件，后面详述同步方案</p>
<h4>Templater</h4>
<p>模板增强插件，如果你觉得你经常进行重复的记录劳动，可能需要创建一个模板？</p>
<h4>Weread Plugin</h4>
<p>微信读书同步插件。安装插件后，只要扫码登陆，就可以同步所有书籍笔记了，真的很方便</p>
<p><a href="https://www.bilibili.com/video/BV1f34y1h7jk/?spm_id_from=333.999.0.0">学了3天typescript写了一个微信读书的Obsidian插件_哔哩哔哩_bilibili</a></p>
<h2>同步方案</h2>
<p>在这段时间里，我使用过如下同步方案：</p>
<h3>不同的同步方案</h3>
<h4>WPS 云盘同步</h4>
<p>最开始用的方法，同步频次过低，不符合个人使用习惯</p>
<p>我之所以之前使用这个方法，是因为我已经有了WPS会员，想试试云盘同步效果怎么样。类似的还有百度网盘同步，但它们都有一个缺陷，手机同步不方便。</p>
<h4>Git 同步</h4>
<p>Git同步最大问题是，两台设备同时编辑容易冲突</p>
<p>这个方案比较适合备份场景，只有一个人使用，不要求实时性</p>
<p>但其有点也很明显，免费，如果附件不多的话，完全够用</p>
<h4>对象存储 (S3) 同步</h4>
<p>同步比较费流量，S3 主要是外网下行流量，不走 CDN 流量，而外网下行流量又是比较贵的，腾讯云 COS 是 0.5 元/GB，七牛云是 0.22 元/GB，其他费用差不多，不过七牛云有免费额度。</p>
<p>所以，如果要使用对象存储，推荐使用七牛云，价格比较实惠。</p>
<p>另外，<code>Remotely Save</code>插件在多设备同步的时候还是有些小问题，谨慎使用</p>
<blockquote>
<p>[!注意]
以上这三种同步方案，都不建议同步<code>.obsidian</code>文件夹，否则会出现文件冲突、配置异常等问题</p>
</blockquote>
<p>这几种同步方案各有优劣，还是要看具体情况。</p>
<p>我目前使用的是Git方案，我后期如果需要在文章中引用大量PDF的话，仓库容量会大幅上涨，可能需要换S3同步，当然也可以把PDF换成截图，来折中一下。或者将附件上传到图床，然后引用链接。</p>
<h3>Git同步方案详解</h3>
<h4>Git电脑端的配置</h4>
<p>要想手机端Git正常工作，需要提前在电脑端配置好Git信息：</p>
<blockquote>
<p>[!注意]
这里不要加<code>--global</code></p>
</blockquote>
<pre><code class="language-shell">git config user.name &quot;输入你的名字&quot;
git config user.email &quot;输入你的邮箱&quot;
git config http.postBuffer 524288000
git config credential.helper store
</code></pre>
<p>前两行配置用户基本信息</p>
<p>第三行配置上传最大文件限制大小，如果你要上传<code>.obsidian</code>文件夹，可能会出现上传不了的问题，这时需要改这个配置，但我不建议你这么做</p>
<p>最后一行配置保存密码，不用每次提交都输入密码</p>
<h4>手机上的同步</h4>
<p>在手机上安装Obsidian，首先先把电脑上的笔记文件夹完整的粘贴到手机上（通过数据线连接电脑，不然可能很慢）</p>
<p>然后用手机端的Obsidian打开。</p>
<p>初始化后，Git插件会要求输入您的Git账户密码，输入完成后即可正常同步。</p>
<p>手机端的Git同步似乎时间有点长（当然用S3速度很快，但是消耗流量比较大），建议在手机端只拉取，查阅笔记。编辑笔记的主要工作还是用电脑端。</p>
<h3>软件同步</h3>
<p>软件同步延迟低，在一台设备上编辑，另一台设备马上就能看到修改结果。但是两个设备同时修改同一个文件会引发冲突。如果同步的两台设备有一台不在线同步就无法进行，最好是有一台设备持续在线同步给其他设备，适合NAS场景。对象存储可以实现离线同步，这个是和S3同步最大的不同点，需要根据应用场景选择合适的同步方式，当然也可以全部使用，但两种同步方式会不会起冲突不得而知。</p>
<h4>syncthing</h4>
<p>该软件为开源软件，安全性有保障，p2p同步。缺点是两台设备需要在同一局域网内，跨局域网基本不能用，需要自建中继服务器。</p>
<h4>微力同步</h4>
<p>该软件基于syncthing改写，但是不开源，自带打洞，安装好后就可以跨局域网同步，可以通过二维码一键共享文件，比较方便，不想折腾的小白直接用这个软件就好了。</p>
<h2>图床搭建</h2>
<p>一般自用图床，使用云服务商的对象存储就行了，而且七牛云还有免费额度，每月的费用可以忽略不计。</p>
<p>自动化上传图片到图床，需要用到一个开源软件<code>PicGo</code>。此外，Obsidian需要一个插件<code>Image auto upload plugin</code>。</p>
<p>具体教程可参见网上：</p>
<p><a href="https://zhuanlan.zhihu.com/p/141610018">picgo使用七牛云图床 - 知乎 (zhihu.com)</a></p>
<h2>博客发布</h2>
<p>目前我使用<a href="https://www.cnblogs.com/juzaizai/">博客园</a>，感觉传Markdown博客基本够用，而且广告基本没有，有人说博客园界面太简陋，我这里有一个不错的主题推荐一下：<a href="https://esofar.github.io/cnblogs-theme-silence/#/">Silence - 专注于阅读的博客园主题 (esofar.github.io)</a></p>
<h3>Obsidian发布</h3>
<p>obsidian能实现零成本的原生发布：[[Obsidian部署Digital Garden]]</p>
<h2>总结</h2>
<p>这段时间花了一些时间探索Obsidian的用法，主要是在解决Obsidian的同步问题。</p>
<p>目前还是决定采用Git同步，Gitee有单个仓库5G的容量限制，可以通过附件传云上或者换一个没有容量限制的Git仓库（这个是有的，比如阿里的?）来解决。</p>
<p>如果使用S3同步方案会消耗很大流量，对单纯同步笔记来说没有必要。</p>
<p>解决了同步问题，剩下的就是功能性的问题，Obsidian最基本的文本处理做的很不错，不需要担心有什么BUG。</p>
<p>再者做笔记不太需要花里胡哨的功能，以后有什么需求了，百度一下就行，就比如微信读书同步，这个插件挺不错的。</p>
<p>千万不要刻意去搜寻大量插件，给自己创造虚假的需求，记录笔记才是我们的初衷。</p>
]]></content><link href="https://github.com/aqvq/aqvq/issues/2"/><category term="BLOG"/><published>2024-11-28T10:51:31+00:00</published></entry><entry><id>https://github.com/aqvq/aqvq/issues/1</id><title>explore-eqa中的三个三维坐标系</title><updated>2024-11-28T12:03:17.766830+00:00</updated><content type="html"><![CDATA[<p>在 Habitat 项目中，坐标系的转换涉及多个代码模块，主要包括相机坐标系、体素坐标系和世界坐标系之间的转换。为了帮助理解，下面用字符画绘制三个坐标系的轴向关系，并结合 Habitat 项目的代码说明它们的用法。</p>
<h3>1. 世界坐标系 (World Coordinate System)</h3>
<p>Habitat 使用右手坐标系作为世界坐标系，<code>X</code> 轴朝右，<code>Y</code> 轴朝上，<code>Z</code> 轴指向外（朝观察者）。在世界坐标系中，物体的位置和方向都是全局的。Habitat 中的坐标转换，例如 <code>pos_habitat_to_normal()</code> 和 <code>pos_normal_to_habitat()</code>，会涉及此坐标系的使用。</p>
<p>字符画表示：</p>
<pre><code>       Y (向上)
       |
       |
       |
       +-------- X (向右)
      /
     /
    Z (指向外，朝观察者)
</code></pre>
<p>代码示例：</p>
<pre><code class="language-python">def pos_habitat_to_normal(pts):
    # -90 度绕 X 轴旋转，将 Habitat 坐标系转换到标准右手坐标系
    return np.dot(pts, np.array([[1, 0, 0], [0, 0, 1], [0, -1, 0]]))
</code></pre>
<p>这段代码表示：Habitat 的世界坐标系在默认情况下，<code>Y</code> 轴朝上，<code>Z</code> 轴指向观察者；而这里 <code>pos_habitat_to_normal()</code> 函数进行坐标系转换，使其符合标准的右手坐标系表示。</p>
<h3>2. 相机坐标系 (Camera Coordinate System)</h3>
<p>相机坐标系的惯例是，<code>X</code> 轴向右，<code>Y</code> 轴向下，<code>Z</code> 轴指向前方（即相机视线方向）。在 Habitat 中，摄像头的位置和方向被用于生成深度图和彩色图，并且涉及相机坐标系和世界坐标系之间的转换。</p>
<p>字符画表示：</p>
<pre><code>       Z (指向前方，视线方向)
       |
       |
       |
       +-------- X (向右)
      /
     /
    Y (向下)
</code></pre>
<p>代码示例：</p>
<pre><code class="language-python">def get_current_view_mask(self, cam_intr, cam_pose, im_w, im_h):
    cam_pts = rigid_transform(self.cam_pts_pre, np.linalg.inv(cam_pose))
    # 代码中进行了相机坐标到世界坐标的转换
</code></pre>
<p>在这段代码中，通过 <code>rigid_transform</code> 函数，<code>cam_pose</code> 的逆矩阵将相机坐标转换到世界坐标系。这是因为在 Habitat 中，相机的观察点首先是根据世界坐标系确定的，然后进行转换以生成深度图等数据。</p>
<h3>3. 体素坐标系 (Voxel Coordinate System)</h3>
<p>体素坐标系用于表示 3D 空间中的离散网格。体素原点通常放置在网格的某个角，<code>X</code> 轴、<code>Y</code> 轴、<code>Z</code> 轴沿着体素网格的三个维度方向。在 Habitat 中，体素坐标系主要用于 TSDF（截断符号距离函数）体积融合中，以更新 3D 地图。</p>
<p>字符画表示：</p>
<pre><code>       Y (向上)
       |
       |
       |
       +-------- X (向右)
      /
     /
    Z (指向深度方向)
</code></pre>
<p>代码示例：</p>
<pre><code class="language-python">def world2vox(self, pts):
    pts = pts - self._vol_origin
    coords = np.round(pts / self._voxel_size).astype(int)
    coords = np.clip(coords, 0, self._vol_dim - 1)
    return coords
</code></pre>
<p>在这段代码中，<code>world2vox()</code> 函数将世界坐标转换为体素坐标。首先，它将输入点减去体素体积的原点，然后根据体素大小缩放到离散的体素网格中。</p>
<h3>结合示意图与代码关系</h3>
<ol>
<li><strong>世界坐标系</strong>：表示场景中物体的全局位置，通过 <code>pos_habitat_to_normal()</code> 和 <code>pos_normal_to_habitat()</code> 函数进行转换。</li>
<li><strong>相机坐标系</strong>：相机坐标系与世界坐标系之间的转换主要通过相机的姿态矩阵 <code>cam_pose</code>，以及像 <code>get_current_view_mask()</code> 这样的函数来实现。</li>
<li><strong>体素坐标系</strong>：用于构建 3D 地图，<code>world2vox()</code> 函数负责将世界坐标转换到体素坐标系，以便在 TSDF 融合中进行更新。</li>
</ol>
<h3>总结</h3>
<ul>
<li>世界坐标系描述了物体在全局场景中的位置和方向。</li>
<li>相机坐标系用于相机的观察，通常是右手系，但 <code>Y</code> 轴朝下，<code>Z</code> 轴指向前方。</li>
<li>体素坐标系是一个离散的网格坐标系，用于 3D 重建和地图更新。</li>
</ul>
<p>Habitat 项目中，不同坐标系之间的转换是核心部分，比如 TSDF 体积融合过程中涉及相机坐标系和体素坐标系之间的转换。</p>
]]></content><link href="https://github.com/aqvq/aqvq/issues/1"/><category term="eqa"/><category term="BLOG"/><published>2024-11-28T08:20:30+00:00</published></entry></feed>